{"version":3,"sources":["components/AddCategiry.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","ctgs","htmlFor","type","id","className","placeholder","value","onChange","target","getGifs","category","a","URL","encodeURIComponent","fetch","res","json","data","gifs","map","images","title","key","url","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","src","alt","GifGrid","props","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAyCeA,EAtCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAErB,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAeA,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,QAAU,IAC9BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKhB,SACE,wBAAOO,QAAQ,cAAf,UACE,8CACA,uBACEC,KAAK,OACLC,GAAG,cACHC,UAAU,aACVC,YAAY,eACZC,MAAQb,EACRc,SAvBkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3Bd,EAAcc,EAAOF,gB,+BCOVG,EAfF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,0FACkFC,mBAAmBH,GADrG,qBAGII,MAAMF,GAHV,cAGRG,EAHQ,gBAISA,EAAIC,OAJb,uBAINC,EAJM,EAINA,KAEFC,EAAOD,EAAKE,KAAI,gBAAGhB,EAAH,EAAGA,GAAIiB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,MAAf,MAA4B,CAChDC,IAAKnB,EACLoB,IAAKH,EAAOI,iBAAiBD,IAC7BF,YATY,kBAYPH,GAZO,4CAAH,sDCsBEO,EAnBM,SAACf,GACpB,MAA4BlB,mBAAS,CACnCyB,KAAM,GACNS,SAAS,IAFX,mBAAQC,EAAR,KAAeC,EAAf,KAeA,OAVAC,qBAAU,WACRpB,EAAQC,GACLoB,MAAK,SAAAC,GACJH,EAAS,CACPX,KAAMc,EACNL,SAAS,SAGd,CAAEhB,IAEEiB,GCRMK,EAXK,SAAC,GAAoB,IAAlBX,EAAiB,EAAjBA,MAAOE,EAAU,EAAVA,IAC5B,OACE,sBAAKnB,UAAU,WAAf,UACE,yBAASA,UAAU,qBAAnB,SACE,qBAAK6B,IAAMV,EAAMW,IAAMb,EAAQjB,UAAU,cAE3C,mBAAGA,UAAU,kBAAb,SAAiCiB,QCexBc,EAlBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAEjB,EAA0Be,EAAaf,GAA/BO,EAAR,EAAQA,KAAMS,EAAd,EAAcA,QAGd,OACE,qCACE,oBAAItB,UAAU,iBAAd,SAAiCM,IAC/BgB,GAAW,2CACb,qBAAKtB,UAAU,WAAf,SAEIa,EAAKE,KAAI,SAAAiB,GAAK,OAAI,cAAC,EAAD,eAAiBA,aCS9BC,EAlBM,WAEnB,IACA,EAAsC7C,mBADzB,CAAC,SACd,mBAAQ8C,EAAR,KAAoB/C,EAApB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGE+C,EAAWnB,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,U,MCVlD6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b9db3283.chunk.js","sourcesContent":["import {useState} from \"react\";\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n  const [ inputValue, setInputValue ] = useState('');\n\n  const handleInputChange = ({ target }) => {\n    setInputValue(target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if( inputValue.trim().length >= 3 ) {\n      setCategories(ctgs => [ inputValue, ...ctgs ]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <label htmlFor=\"inpCategory\">\n        <span>Search gif</span>\n        <input\n          type=\"text\"\n          id=\"inpCategory\"\n          className=\"inp-search\"\n          placeholder=\"Type some...\"\n          value={ inputValue }\n          onChange={ handleInputChange }\n        />\n      </label>\n    </form>\n  )\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory;\n","const getGifs = async (category) => {\n  const URL = `https://api.giphy.com/v1/gifs/search?api_key=DRvavsDEyd1d0RPt3RznvZr7hDmAMU3r&q=${ encodeURIComponent(category) }&limit=5`;\n\n  const res = await fetch(URL);\n  const { data } = await res.json();\n\n  const gifs = data.map(({ id, images, title }) => ({\n    key: id,\n    url: images.downsized_medium.url,\n    title,\n  }));\n\n  return gifs;\n};\n\nexport default getGifs;\n","import {useEffect, useState} from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nconst useFetchGifs = (category) => {\n  const [ state, setState ] = useState({\n    data: [],\n    loading: true,\n  })\n  \n  useEffect(() => {\n    getGifs(category)\n      .then(imgs => {\n        setState({\n          data: imgs,\n          loading: false,\n        })\n      })\n  }, [ category ])\n\n  return state;\n};\n\nexport default useFetchGifs;\n","const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"gif-card\">\n      <picture className=\"gif-img--container\">\n        <img src={ url } alt={ title } className=\"gif-img\" />\n      </picture>\n      <p className=\"gif-description\">{ title }</p>\n    </div>\n  )\n};\n\nexport default GifGridItem;\n","import useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n  const { data, loading } = useFetchGifs(category);\n\n\n  return (\n    <>\n      <h3 className=\"category-title\">{ category }</h3>\n      { loading && <p>Loading...</p> }\n      <div className=\"gif-grid\">\n        {\n          data.map(props => <GifGridItem {...props} />)\n        }\n      </div>\n    </>\n  )\n};\n\nexport default GifGrid;\n","import { useState } from \"react\";\n\nimport AddCategory from './components/AddCategiry';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const data = ['code'];\n  const [ categories, setCategories ] = useState(data); \n  \n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories }/>\n      <hr/>\n\n      {\n        categories.map(category => <GifGrid key={ category } category={ category }/>)\n      }\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}